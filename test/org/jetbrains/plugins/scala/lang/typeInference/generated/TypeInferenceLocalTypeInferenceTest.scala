package org.jetbrains.plugins.scala.lang.typeInference
package generated

class TypeInferenceLocalTypeInferenceTest extends TypeInferenceTestBase {
  //This class was generated by build script, please don't change this
  override def folderPath: String = super.folderPath + "localTypeInference/"

  def testAbstractExpectedType() {doTest()}

  def testAnyValUpperLowerBound() {doTest()}

  def testArrayCreation() {doTest()}

  def testAsInstanceOfOmittedGenerics() {doTest()}

  def testCompoundType() {doTest()}

  def testEmptyArray() {doTest()}

  def testExistentialInference() {doTest()}

  def testForIndexedSeq() {doTest()}

  def testFromImplicitParam() {doTest()}

  def testFromImplicitParameter() {doTest()}

  def testInfixMap() {doTest()}

  def testIntArrayCreation() {doTest()}

  def testListUnion() {doTest()}

  def testMap() {doTest()}

  def testMapAsFunction() {doTest()}

  def testMostSpecificRuleImplicitParameters() {doTest()}

  def testNoSOE() {doTest()}

  def testOmittedGenericsWithOurClass() {doTest()}

  def testSCL1547() {doTest()}

  def testSCL1644() {doTest()}

  def testSCL1671() {doTest()}

  def testSCL1687() {doTest()}

  def testSCL1771() {doTest()}

  def testSCL1771First() {doTest()}

  def testSCL1772() {doTest()}

  def testSCL1824() {doTest()}

  def testSCL3422() {doTest()}

  def testPatternExistential() {doTest()}

  def testRawTypes() {doTest()}

  def testSameNameGeneric() {doTest()}

  def testSecondClause() {doTest()}

  def testSelfTypeExpected() {doTest()}

  def testSimpleTypeAlias() {doTest()}

  def testSmartArrayMap() {doTest()}

  def testSmartArrayMap2() {doTest()}

  def testSome() {doTest()}

  def testSynchronizedWithGenerics() {doTest()}

  def testToArray() {doTest()}

  def testTypedPatternInference() {doTest()}

  def testZipArrays() {doTest()}

  def testZipWithIndex() {doTest()}

  def testsyncronized() {doTest()}

  def testSCL2507_1() {doTest()}

  def testSCL2507_2() {doTest()}

  def testSCL2507_3() {doTest()}

  def testSCL2507_4() {doTest()}

  def testSCL2507_5() {doTest()}

  def testSCL12598() = doTest()

  def testSCL5809(): Unit = doTest {
    """
      |object SCL5809 {
      |
      |  trait Functor[F[_]] {
      |    def map[A, B](fa: F[A])(f: A => B): F[B]
      |  }
      |
      |  trait Applicative[F[_]] extends Functor[F] {
      |    def map2[A, B, C](fa: F[A], fb: F[B])(f: (A, B) => C): F[C]
      |
      |    def apply[A, B](fab: F[A => B])(fa: F[A]): F[B]
      |
      |    def unit[A](a: A): F[A]
      |
      |    // Excercise 1
      |    def map2ApplyUnit[A, B, C](fa: F[A], fb: F[B])(f: (A, B) => C): F[C] = {
      |      apply[B, C](apply[A, B => C](unit(f.curried))(fa))(fb)
      |    }
      |
      |    def applyMap2Unit[A, B](fab: F[A => B])(fa: F[A]): F[B] = {
      |      map2(fab, fa)((f, a) => f(a))
      |    }
      |
      |    def map[A, B](fa: F[A])(f: A => B): F[B] = {
      |      apply(/*start*/unit(f)/*end*/)(fa)
      |    }
      |  }
      |
      |  object Applicative {
      |  }
      |
      |}
      |//F[A => B]
    """.stripMargin.trim
  }

}